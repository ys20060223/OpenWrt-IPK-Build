name: Build-eBPF-Keepalived-Plugin

on:
  workflow_dispatch:
    inputs:
      PluginRepo:
        description: 'Keepalived 仓库地址 (默认: https://github.com/acassen/keepalived)'
        required: false
        default: 'https://github.com/acassen/keepalived'
        type: string
      PluginBranch:
        description: 'Keepalived 分支/版本 (默认: v2.2.8)'
        required: false
        default: 'v2.2.8'
        type: string
      TargetArch:
        description: '目标架构 (如 mediatek/filogic, x86/64 等)'
        required: true
        type: string
      OpenWrtVersion:
        description: 'OpenWrt 版本 (如 24.10.2)'
        required: true
        type: string
      SkipTests:
        description: '跳过测试步骤'
        required: false
        default: 'false'
        type: boolean
      VerboseOutput:
        description: '启用详细编译输出'
        required: false
        default: 'false'
        type: boolean

env:
  TZ: Asia/Shanghai
  WORKSPACE: /github/workspace

jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:22.04
      options: --privileged  # 需要特权模式访问内核功能
    
    steps:
      - name: 安装基础依赖
        run: |
          apt-get update -qq
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            build-essential git g++ gawk gcc-multilib gettext libncurses5-dev libssl-dev \
            python3 rsync unzip zstd zlib1g-dev jq aria2 curl ca-certificates \
            libelf-dev clang llvm libbpf-dev libnl-3-dev libnl-genl-3-dev libnl-route-3-dev \
            bison flex libcap-dev libpam-dev pkg-config libjson-c-dev libc-ares-dev \
            libdbus-1-dev liblz4-dev liblzma-dev libsnmp-dev libmnl-dev libprotobuf-c-dev \
            libcrypt-dev libnftnl-dev libreadline-dev libsystemd-dev liburcu-dev libxml2-dev \
            automake autoconf autoconf-archive libtool

      - name: 克隆 Keepalived 仓库
        run: |
          git clone --depth=1 --branch ${{ github.event.inputs.PluginBranch }} ${{ github.event.inputs.PluginRepo }} keepalived-source
          
          # 应用关键补丁
          sed -i '/AC_ARG_ENABLE(\[bpf\],/,/fi$/ {
              s/\[enable_bpf=no\]/[enable_bpf=yes]/;
              s/if test "$enable_bpf" = yes;/if test "$enable_bpf" = yes; then\n  AC_DEFINE([HAVE_BPF], [1], [Enable BPF support])\n/;
          }' keepalived-source/configure.ac
          
          # Mediatek 平台兼容性修复
          sed -i '/#include <linux\/if_packet.h>/a #ifndef __aligned_u64\n#define __aligned_u64 __u64 __attribute__((aligned(8)))\n#endif' keepalived-source/keepalived/check/check_bpf.c
          
          echo "KEEPALIVED_DIR=$(pwd)/keepalived-source" >> $GITHUB_ENV

      - name: 下载并解压 SDK
        run: |
          # 构建 SDK URL
          ARCH_SLUG=$(echo "${{ github.event.inputs.TargetArch }}" | sed 's/\//_/g')
          SDK_URL="https://downloads.immortalwrt.org/releases/${{ github.event.inputs.OpenWrtVersion }}/targets/${{ github.event.inputs.TargetArch }}/immortalwrt-sdk-${{ github.event.inputs.OpenWrtVersion }}-$ARCH_SLUG""_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          echo "SDK_URL=$SDK_URL" >> $GITHUB_ENV
          
          # 下载并解压 SDK
          aria2c -x 16 -s 16 "$SDK_URL" -o sdk.tar.zst
          tar -I 'zstd -d' -xf sdk.tar.zst --strip-components=1
          echo "SDK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "STAGING_DIR=$(pwd)/staging_dir" >> $GITHUB_ENV

      - name: 配置 eBPF 编译环境
        run: |
          cd ${{ env.SDK_DIR }}
          
          # 更新 feeds 并安装依赖
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install libbpf bpftool libnl-core libnl-genl libnl-route
          
          # 创建 Keepalived 包
          mkdir -p package/network/utils/keepalived
          cp -r ${{ env.KEEPALIVED_DIR }}/* package/network/utils/keepalived/
          
          # 创建优化的 Makefile
          cat > package/network/utils/keepalived/Makefile <<'EOL'
include $(TOPDIR)/rules.mk

PKG_NAME:=keepalived
PKG_VERSION:=${{ github.event.inputs.PluginBranch | replace('v','') }}
PKG_RELEASE:=1

PKG_SOURCE_PROTO:=git
PKG_SOURCE_URL:=${{ github.event.inputs.PluginRepo }}
PKG_SOURCE_VERSION:=${{ github.event.inputs.PluginBranch }}
PKG_MIRROR_HASH:=skip

PKG_MAINTAINER:=Keepalived eBPF Builder
PKG_LICENSE:=GPL-2.0
PKG_LICENSE_FILES:=COPYING

PKG_FIXUP:=autoreconf
PKG_INSTALL:=1

include $(INCLUDE_DIR)/package.mk

define Package/keepalived
  SECTION:=net
  CATEGORY:=Network
  TITLE:=Failover and monitoring daemon with eBPF support
  URL:=https://www.keepalived.org/
  DEPENDS:=+libnl-core +libnl-genl +libnl-route +libbpf +bpftool +kmod-sched-bpf
endef

define Package/keepalived/description
  Enhanced Keepalived with eBPF support for real-time traffic monitoring.
endef

CONFIGURE_ARGS += \
	--enable-bpf \
	--with-bpf-lib \
	--disable-systemd \
	--without-init=systemd \
	--with-kernel-dir="$(LINUX_DIR)" \
	LDFLAGS="$(TARGET_LDFLAGS) -L$(STAGING_DIR)/usr/lib"

define Package/keepalived/install
	$(INSTALL_DIR) $(1)/usr/sbin
	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/sbin/keepalived $(1)/usr/sbin/
endef

$(eval $(call BuildPackage,keepalived))
EOL

      - name: 配置内核选项
        run: |
          cd ${{ env.SDK_DIR }}
          
          # 生成默认配置
          make defconfig
          
          # 启用必要内核选项
          ./scripts/config --set-val CONFIG_PACKAGE_keepalived y
          ./scripts/config --set-val CONFIG_PACKAGE_libbpf y
          ./scripts/config --set-val CONFIG_PACKAGE_bpftool y
          ./scripts/config --set-val CONFIG_PACKAGE_kmod-sched-bpf y
          ./scripts/config --set-val CONFIG_PACKAGE_libnl-core y
          ./scripts/config --set-val CONFIG_PACKAGE_libnl-genl y
          ./scripts/config --set-val CONFIG_PACKAGE_libnl-route y
          ./scripts/config --set-val CONFIG_BPF y
          ./scripts/config --set-val CONFIG_BPF_SYSCALL y
          ./scripts/config --set-val CONFIG_BPF_JIT y
          ./scripts/config --set-val CONFIG_DEBUG_INFO_BTF y
          
          # 应用配置
          make oldconfig

      - name: 编译工具链和依赖
        run: |
          cd ${{ env.SDK_DIR }}
          make tools/compile -j$(nproc) V=${{ github.event.inputs.VerboseOutput && 's' || 'sc' }}
          make toolchain/compile -j$(nproc) V=${{ github.event.inputs.VerboseOutput && 's' || 'sc' }}
          make package/libnl/compile -j$(nproc) V=${{ github.event.inputs.VerboseOutput && 's' || 'sc' }}
          make package/libbpf/compile -j$(nproc) V=${{ github.event.inputs.VerboseOutput && 's' || 'sc' }}
          make package/bpftool/compile -j$(nproc) V=${{ github.event.inputs.VerboseOutput && 's' || 'sc' }}

      - name: 编译 Keepalived
        run: |
          cd ${{ env.SDK_DIR }}
          
          # 重新生成配置
          (cd package/network/utils/keepalived && autoreconf -fvi)
          
          # 编译并记录日志
          make package/network/utils/keepalived/compile -j$(nproc) V=${{ github.event.inputs.VerboseOutput && 's' || 'sc' }} 2>&1 | tee build.log
          
          # 验证 BPF 支持
          PKG_BUILD_DIR=$(find build_dir/target-*/keepalived-* -maxdepth 0 -type d)
          if strings $PKG_BUILD_DIR/keepalived/keepalived | grep -q "bpf"; then
            echo "✅ eBPF支持验证成功"
          else
            echo "::error::eBPF支持未在二进制中找到"
            grep -i "bpf" build.log
            exit 1
          fi

      - name: 运行测试 (可选)
        if: ${{ !github.event.inputs.SkipTests }}
        run: |
          cd ${{ env.SDK_DIR }}
          echo "运行基本测试..."
          
          # 测试二进制文件
          $PKG_BUILD_DIR/keepalived/keepalived --version
          
          # 检查BPF支持
          if $PKG_BUILD_DIR/keepalived/keepalived --version | grep -q "bpf"; then
            echo "✅ BPF支持已启用"
          else
            echo "::error::BPF支持未启用"
            exit 1
          fi

      - name: 收集产物
        run: |
          cd ${{ env.SDK_DIR }}
          mkdir -p artifacts
          
          # 复制所有相关文件
          find bin -name "keepalived*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "libbpf*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "bpftool*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "libnl-*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "kmod-sched-bpf*.ipk" -exec cp -v {} artifacts/ \;
          
          # 创建智能安装脚本
          cat > artifacts/install.sh <<'EOL'
#!/bin/sh
set -e

echo "正在安装 eBPF Keepalived..."
opkg update

# 安装顺序很重要
for pkg in libbpf libnl-core libnl-genl libnl-route bpftool kmod-sched-bpf keepalived; do
  ipk_file=$(ls ${pkg}*.ipk 2>/dev/null | head -1)
  if [ -n "$ipk_file" ]; then
    echo "安装 $ipk_file"
    opkg install $ipk_file
  else
    echo "警告: 未找到 $pkg 的安装包"
  fi
done

echo -e "\n安装完成！验证："
keepalived --version | grep -i "bpf" && echo "✅ eBPF支持已启用" || echo "❌ eBPF支持未启用"
EOL
          
          chmod +x artifacts/install.sh
          cp build.log artifacts/

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: keepalived-ebpf-${{ github.event.inputs.OpenWrtVersion }}-${{ github.event.inputs.TargetArch | replace('/', '-') }}
          path: ${{ env.SDK_DIR }}/artifacts/*
          retention-days: 7
