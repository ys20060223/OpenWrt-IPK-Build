name: Build-eBPF-Keepalived-for-NX30Pro

on:
  # 工作流调度事件 - 允许在GitHub UI中手动触发
  workflow_dispatch:
    inputs:
      skip_tests:
        description: '跳过测试步骤？'
        required: false
        default: 'false'
        type: boolean
      verbose:
        description: '启用详细输出'
        required: false
        default: 'false'
        type: boolean
  
  # 代码推送事件 - 当代码推送到main分支时触发
  push:
    branches: [main]

env:
  TARGET_ARCH: "mediatek/filogic"
  OPENWRT_VERSION: "24.10.2"
  SDK_URL: "https://downloads.immortalwrt.org/releases/24.10.2/targets/mediatek/filogic/immortalwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    
    steps:
      - name: 检查代码
        uses: actions/checkout@v4
        
      - name: 设置工作空间
        run: |
          mkdir -p $HOME/workspace
          cd $HOME/workspace
          echo "WORKSPACE=$HOME/workspace" >> $GITHUB_ENV
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: 安装基础依赖
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential git g++ gawk gcc-multilib gettext libncurses5-dev libssl-dev \
            python3 python3-distutils rsync unzip zstd zlib1g-dev jq aria2 curl ca-certificates \
            libelf-dev clang llvm libbpf-dev libnl-3-dev libnl-genl-3-dev libnl-route-3-dev \
            bison flex libcap-dev libpcre2-dev libpam-dev pkg-config libjson-c-dev libc-ares-dev \
            libdbus-1-dev liblz4-dev liblzma-dev libsnmp-dev libmnl-dev libprotobuf-c-dev \
            libcrypt-dev libnftnl-dev libreadline-dev libsystemd-dev liburcu-dev libxml2-dev \
            automake autoconf autoconf-archive libtool

      - name: 克隆 Keepalived (v2.2.8)
        run: |
          cd ${{ env.WORKSPACE }}
          git clone --depth=1 --branch v2.2.8 https://github.com/acassen/keepalived.git keepalived-source
          
          # 启用BPF编译选项
          sed -i '/AC_ARG_ENABLE(\[bpf\],/,/fi$/ {
              s/\[enable_bpf=no\]/[enable_bpf=yes]/;
              s/if test "$enable_bpf" = yes;/if test "$enable_bpf" = yes; then\n  AC_DEFINE([HAVE_BPF], [1], [Enable BPF support])\n/;
          }' keepalived-source/configure.ac
          
          # 添加Mediatek平台兼容性修复
          sed -i '/#include <linux\/if_packet.h>/a #ifndef __aligned_u64\n#define __aligned_u64 __u64 __attribute__((aligned(8)))\n#endif' keepalived-source/keepalived/check/check_bpf.c
          
          echo "KEEPALIVED_SRC=${{ env.WORKSPACE }}/keepalived-source" >> $GITHUB_ENV

      - name: 下载并解压 SDK
        run: |
          cd ${{ env.WORKSPACE }}
          aria2c -x 16 -s 16 "${{ env.SDK_URL }}" -o sdk.tar.zst
          tar -I 'zstd -d' -xf sdk.tar.zst --strip-components=1
          echo "SDK_DIR=${{ env.WORKSPACE }}" >> $GITHUB_ENV
          echo "STAGING_DIR=${{ env.WORKSPACE }}/staging_dir" >> $GITHUB_ENV

      - name: 配置编译环境
        run: |
          cd ${{ env.SDK_DIR }}
          
          # 设置临时目录
          export TMPDIR=${{ env.WORKSPACE }}/tmp
          mkdir -p $TMPDIR
          
          # 更新feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install libbpf bpftool libnl-core libnl-genl libnl-route
          
          # 创建Keepalived包目录
          mkdir -p package/network/utils/keepalived
          cp -r ${{ env.KEEPALIVED_SRC }}/* package/network/utils/keepalived/
          
          # 创建自定义Makefile
          cat > package/network/utils/keepalived/Makefile <<'EOL'
include $(TOPDIR)/rules.mk

PKG_NAME:=keepalived
PKG_VERSION:=2.2.8
PKG_RELEASE:=1

PKG_SOURCE_PROTO:=git
PKG_SOURCE_URL:=https://github.com/acassen/keepalived.git
PKG_SOURCE_VERSION:=v$(PKG_VERSION)
PKG_MIRROR_HASH:=skip

PKG_MAINTAINER:=Alexandre Cassen <acassen@gmail.com>
PKG_LICENSE:=GPL-2.0
PKG_LICENSE_FILES:=COPYING

PKG_FIXUP:=autoreconf
PKG_INSTALL:=1

include $(INCLUDE_DIR)/package.mk

define Package/keepalived
  SECTION:=net
  CATEGORY:=Network
  TITLE:=Failover and monitoring daemon for LVS clusters
  URL:=https://www.keepalived.org/
  DEPENDS:=+libnl-core +libnl-genl +libnl-route +libbpf +bpftool +kmod-sched-bpf
endef

define Package/keepalived/description
  Keepalived provides frameworks for both load balancing and high-availability.
  This version includes eBPF support for NX30Pro routers.
endef

CONFIGURE_ARGS += \
	--enable-bpf \
	--with-bpf-lib \
	--disable-systemd \
	--without-init=systemd \
	--with-kernel-dir="$(LINUX_DIR)" \
	LDFLAGS="$(TARGET_LDFLAGS) -L$(STAGING_DIR)/usr/lib"

define Package/keepalived/install
	$(INSTALL_DIR) $(1)/usr/sbin
	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/sbin/keepalived $(1)/usr/sbin/
endef

$(eval $(call BuildPackage,keepalived))
EOL

      - name: 配置内核选项
        run: |
          cd ${{ env.SDK_DIR }}
          
          # 生成默认配置
          make defconfig
          
          # 启用必要选项
          ./scripts/config --set-val CONFIG_PACKAGE_keepalived y
          ./scripts/config --set-val CONFIG_PACKAGE_libbpf y
          ./scripts/config --set-val CONFIG_PACKAGE_bpftool y
          ./scripts/config --set-val CONFIG_PACKAGE_kmod-sched-bpf y
          ./scripts/config --set-val CONFIG_PACKAGE_libnl-core y
          ./scripts/config --set-val CONFIG_PACKAGE_libnl-genl y
          ./scripts/config --set-val CONFIG_PACKAGE_libnl-route y
          ./scripts/config --set-val CONFIG_BPF y
          ./scripts/config --set-val CONFIG_BPF_SYSCALL y
          ./scripts/config --set-val CONFIG_BPF_JIT y
          ./scripts/config --set-val CONFIG_DEBUG_INFO_BTF y
          
          # 应用配置
          make oldconfig

      - name: 编译工具链和依赖
        run: |
          cd ${{ env.SDK_DIR }}
          make tools/compile -j$(nproc) V=${{ github.event.inputs.verbose && 's' || 'sc' }}
          make toolchain/compile -j$(nproc) V=${{ github.event.inputs.verbose && 's' || 'sc' }}
          make package/libnl/compile -j$(nproc) V=${{ github.event.inputs.verbose && 's' || 'sc' }}
          make package/libbpf/compile -j$(nproc) V=${{ github.event.inputs.verbose && 's' || 'sc' }}
          make package/bpftool/compile -j$(nproc) V=${{ github.event.inputs.verbose && 's' || 'sc' }}

      - name: 编译 Keepalived
        run: |
          cd ${{ env.SDK_DIR }}
          
          # 重新生成配置
          (cd package/network/utils/keepalived && autoreconf -fvi)
          
          # 开始编译
          make package/network/utils/keepalived/compile -j$(nproc) V=${{ github.event.inputs.verbose && 's' || 'sc' }} 2>&1 | tee build.log
          
          # 验证BPF支持
          PKG_BUILD_DIR=$(find build_dir/target-*/keepalived-* -maxdepth 0 -type d)
          if strings $PKG_BUILD_DIR/keepalived/keepalived | grep -q "bpf"; then
            echo "✅ eBPF支持验证成功"
          else
            echo "::error::eBPF支持未在二进制中找到"
            grep -i "bpf" build.log
            exit 1
          fi

      - name: 运行测试 (可选)
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          cd ${{ env.SDK_DIR }}
          echo "运行基本测试..."
          # 简单测试二进制文件是否包含BPF支持
          if $PKG_BUILD_DIR/keepalived/keepalived --version | grep -q "BPF"; then
            echo "✅ 版本检查通过"
          else
            echo "::error::二进制文件中未检测到BPF支持"
            exit 1
          fi

      - name: 收集产物
        run: |
          cd ${{ env.SDK_DIR }}
          mkdir -p artifacts
          
          # 复制所有相关文件
          find bin -name "keepalived*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "libbpf*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "bpftool*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "libnl-*.ipk" -exec cp -v {} artifacts/ \;
          find bin -name "kmod-sched-bpf*.ipk" -exec cp -v {} artifacts/ \;
          
          # 创建安装脚本
          cat > artifacts/install.sh <<'EOL'
#!/bin/sh
echo "正在安装 eBPF Keepalived..."
opkg update

# 安装顺序很重要
opkg install libbpf*.ipk
opkg install libnl-core*.ipk libnl-genl*.ipk libnl-route*.ipk
opkg install bpftool*.ipk
opkg install kmod-sched-bpf*.ipk
opkg install keepalived*.ipk

echo -e "\n安装完成！验证："
keepalived --version | grep -i "bpf" && echo "✅ eBPF支持已启用" || echo "❌ eBPF支持未启用"
EOL
          
          chmod +x artifacts/install.sh
          cp build.log artifacts/

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: keepalived-ebpf-nx30pro
          path: ${{ env.SDK_DIR }}/artifacts/*
          retention-days: 7
